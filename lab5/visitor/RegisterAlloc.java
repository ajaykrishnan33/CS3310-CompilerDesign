//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import helpers.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */

public class RegisterAlloc<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

  public GlobalSymTab g;

  public RegisterAlloc(GlobalSymTab g)
  {
    super();
    this.g = g;
  }

  HashMap<Integer, ArrayList<Integer>> in;
  HashMap<Integer, ArrayList<Integer>> out;
  HashMap<String, Integer> labels = new HashMap<String, Integer>();
  int line;
  int ret_line;

  public boolean hasChange(HashMap<Integer, ArrayList<Integer>> in, HashMap<Integer, ArrayList<Integer>> out, HashMap<Integer, ArrayList<Integer>> in_dash, HashMap<Integer, ArrayList<Integer>> out_dash){
    if(in_dash==null || out_dash==null)
      return true;

    int mapSize = in.size();
    for(int i=0; i<mapSize; i++){
      ArrayList<Integer>l1 = in.get(i);
      ArrayList<Integer>l2 = in_dash.get(i);
      if(l1.size()!=l2.size())
        return true;
      
      for (int j: l1){
        if(!l2.contains(j))
          return true;
      }
      ArrayList<Integer>m1 = out.get(i);
      ArrayList<Integer>m2 = out_dash.get(i);
      if(m1.size()!=m2.size())
        return true;
      for (int j: m1){
        if(!m2.contains(j))
          return true;
      }
    }
    return false;
  }

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;

      g.switch_function("MAIN");

      ArrayList<Integer> func_init = new ArrayList<Integer>();
      func_init.add(0);
      func_init.add(-1);
      argu = (A)func_init;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      g.build_live_ranges();
      // g.print_live_ranges();

      g.register_alloc();
      // g.print_alloc();
      g.fill_params();
      // g.print_alloc();

      return _ret;
   }

   HashMap<Integer, ArrayList<Integer>> copy_hash_contents(HashMap<Integer, ArrayList<Integer>> old_map){
      HashMap<Integer, ArrayList<Integer>> new_map = new HashMap<Integer, ArrayList<Integer>>();
      if(old_map==null)
        return new_map;
      for(Map.Entry<Integer, ArrayList<Integer>> entry : old_map.entrySet())
      {
        new_map.put(entry.getKey(), new ArrayList<Integer>(entry.getValue()));
      }
      return new_map;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      // n.f0.accept(this, argu);
      ArrayList<Integer> new_out;
      ArrayList<Integer> new_in;

      HashMap<Integer, ArrayList<Integer>> in_dash;
      HashMap<Integer, ArrayList<Integer>> out_dash;
      int i;

      ArrayList<Integer> func_init = (ArrayList<Integer>)argu;
      int num_args = func_init.get(0);
      int ret_temp = func_init.get(1);

      if(n.f0.present())
      {
        do
        {
          in_dash = in;
          out_dash = out;
          in = copy_hash_contents(in_dash);
          out = copy_hash_contents(out_dash);
          ret_line = n.f0.size()+1;

          in.put(0, new ArrayList<Integer>());
          new_out = new ArrayList<Integer>();
          for(i=0;i<num_args;i++)
          {
            new_out.add(i);
          }
          out.put(0, new_out);

          new_in = new ArrayList<Integer>();
          if(ret_temp!=-1)
            new_in.add(ret_temp);
          in.put(ret_line, new_in);
          out.put(ret_line, new ArrayList<Integer>());

          for(i=n.f0.size()-1;i>=0;i--)
          {
            line = i+1;
            if(!out.containsKey(line))
              out.put(line, new ArrayList<Integer>());
            ((NodeSequence)n.f0.elementAt(i)).elementAt(1).accept(this, argu);
          }

        }
        while(hasChange(in, out, in_dash, out_dash));
      }
      g.curr_func.in = in;
      g.curr_func.out = out;

      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String func_name = n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String num_args = n.f2.accept(this, argu).toString();

      n.f3.accept(this, argu);

      g.switch_function(func_name);

      n.f4.accept(this, (A)num_args);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      // if(!in.containsKey(line+1))
      //   in.put(line+1, new ArrayList<Integer>());
      ArrayList<Integer> new_out = new ArrayList<Integer>(in.get(line+1));
      out.put(line, new_out);

      // if(!out.containsKey(line))
      //   out.put(line, new ArrayList<Integer>());
      ArrayList<Integer> new_in = new ArrayList<Integer>(out.get(line));
      in.put(line, new_in);

      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      // if(!in.containsKey(line+1))
      //   in.put(line+1, new ArrayList<Integer>());
      ArrayList<Integer> new_out = new ArrayList<Integer>(in.get(line+1));
      out.put(line, new_out);

      // if(!out.containsKey(line))
      //   out.put(line, new ArrayList<Integer>());
      ArrayList<Integer> new_in = new ArrayList<Integer>(out.get(line));
      in.put(line, new_in);

      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      int temp = Integer.parseInt(n.f1.accept(this, argu).toString());  //used

      String lab = n.f2.accept(this, argu).toString();

      //succ = label and n+1

      int succ = g.curr_func.labels.get(lab);
      if(!in.containsKey(succ))
        in.put(succ, new ArrayList<Integer>());
      ArrayList<Integer> new_out = new ArrayList<Integer>(in.get(succ));

      // if(!in.containsKey(line+1))
      //   in.put(line+1, new ArrayList<Integer>());
      ArrayList<Integer> tmp = new ArrayList<Integer>(in.get(line+1));
      for(int t:tmp)
      {
        if(!new_out.contains(t))
          new_out.add(t);
      }
      out.put(line, new_out);

      // if(!out.containsKey(line))
      //   out.put(line, new ArrayList<Integer>());
      ArrayList<Integer> new_in = new ArrayList<Integer>(out.get(line));
      if(!new_in.contains(temp))
        new_in.add(temp);
      in.put(line, new_in);

      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String lab = n.f1.accept(this, argu).toString();

      //succ = label

      int succ = g.curr_func.labels.get(lab);
      if(!in.containsKey(succ))
        in.put(succ, new ArrayList<Integer>());
      ArrayList<Integer> new_out = new ArrayList<Integer>(in.get(succ));
      out.put(line, new_out);

      // use and def are null so in = out
      // if(!out.containsKey(line))
      //   out.put(line, new ArrayList<Integer>());
      ArrayList<Integer> new_in = new ArrayList<Integer>(out.get(line));
      in.put(line, new_in);


      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      int temp1 = Integer.parseInt(n.f1.accept(this, argu).toString());  //used
      n.f2.accept(this, argu);
      int temp2 = Integer.parseInt(n.f3.accept(this, argu).toString());  //used

      //out[n] = in[n+1]

      // if(!in.containsKey(line+1))
      //   in.put(line+1, new ArrayList<Integer>());
      ArrayList<Integer> new_out = new ArrayList<Integer>(in.get(line+1));
      out.put(line, new_out);

      // if(!out.containsKey(line))
      //   out.put(line, new ArrayList<Integer>());
      ArrayList<Integer> new_in = new ArrayList<Integer>(out.get(line));  // out clone

      // Here def[n] is empty as nothing is defined.
      // in = use + out

      if(!new_in.contains(temp1))
        new_in.add(temp1);
      if(!new_in.contains(temp2))
        new_in.add(temp2);

      in.put(line, new_in);

      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      int temp1 = Integer.parseInt(n.f1.accept(this, argu).toString());  // def
      int temp2 = Integer.parseInt(n.f2.accept(this, argu).toString());  // use
      n.f3.accept(this, argu);

      // out[n] = in[n+1]

      // if(!in.containsKey(line+1))
      //   in.put(line+1, new ArrayList<Integer>());
      ArrayList<Integer> new_out = new ArrayList<Integer>(in.get(line+1));
      if(!new_out.contains(temp1))
        new_out.add(temp1);
      out.put(line, new_out);

      // in = use + (out - def)

      // if(!out.containsKey(line))
      //   out.put(line, new ArrayList<Integer>());
      ArrayList<Integer> new_in = new ArrayList<Integer>(out.get(line));
      if(new_in.contains(temp1))   // out - def
        new_in.remove(new_in.indexOf(temp1));
      if(!new_in.contains(temp2))  // + use
        new_in.add(temp2);

      in.put(line, new_in);

      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      // out[n] = in[n+1]

      // if(!in.containsKey(line+1))
      //   in.put(line+1, new ArrayList<Integer>());

      int def = Integer.parseInt(n.f1.accept(this, argu).toString());

      ArrayList<Integer> new_out = new ArrayList<Integer>(in.get(line+1));
      if(!new_out.contains(def))
        new_out.add(def);
      out.put(line, new_out);

      //in

      // if(!out.containsKey(line))
      //   out.put(line, new ArrayList<Integer>());

      ArrayList<Integer> new_in = new ArrayList<Integer>(out.get(line));
      
      if(new_in.contains(def))
        new_in.remove(new_in.indexOf(def));

      ArrayList<Integer> use = (ArrayList<Integer>)n.f2.accept(this, argu);
      for(int temp : use)
      {
        if(!new_in.contains(temp))
          new_in.add(temp);
      }

      in.put(line, new_in);

      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String se = n.f1.accept(this, argu).toString();

      ArrayList<Integer> new_out = new ArrayList<Integer>(in.get(line+1));
      out.put(line, new_out);
      
      ArrayList<Integer> new_in = new ArrayList<Integer>(out.get(line));

      if(n.f1.f0.which==0)  // temp
      {
        int temp = Integer.parseInt(se);  // use

        // out[n] = in[n+1]
        // if(!in.containsKey(line+1))
        //   in.put(line+1, new ArrayList<Integer>());

        // in

        // if(!out.containsKey(line))
        //   out.put(line, new ArrayList<Integer>());

        if(!new_in.contains(temp))
          new_in.add(temp);
      }

      in.put(line, new_in);

      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      if(n.f0.which!=3)        
        _ret = n.f0.accept(this, argu);
      else
      {
        String se = n.f0.accept(this, argu).toString();
        ArrayList<Integer> use = new ArrayList<Integer>();
        if(((SimpleExp)n.f0.choice).f0.which==0)
        {
          int temp = Integer.parseInt(se);
          use.add(temp);
        }
        _ret = (R)use;
      }
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      ArrayList<Integer> func_init = new ArrayList<Integer>();

      int num_args = Integer.parseInt(argu.toString());
      func_init.add(num_args);

      String se = n.f3.accept(this, argu).toString();
      if(n.f3.f0.which==0)
      {
        func_init.add(Integer.parseInt(se));
      }
      else
        func_init.add(-1);
           
      argu = (A)func_init;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;

      ArrayList<Integer> use = new ArrayList<Integer>();
      int temp;
      n.f0.accept(this, argu);
      String se = n.f1.accept(this, argu).toString();
      if(n.f1.f0.which==0)
      {
        temp = Integer.parseInt(se);
        use.add(temp);
      }
      n.f2.accept(this, argu);
      // int temp2 = Integer.parseInt(n.f3.accept(this, argu).toString());
      int i;
      for(i=0;i<n.f3.size();i++)
      {
        temp = Integer.parseInt(n.f3.elementAt(i).accept(this, argu).toString());
        if(!use.contains(temp))
          use.add(temp);
      }
      _ret = (R)use;
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String se = n.f1.accept(this, argu).toString();
      ArrayList<Integer> use = new ArrayList<Integer>();
      if(n.f1.f0.which==0)
      {
        int temp = Integer.parseInt(se);
        use.add(temp);
      }
      _ret = (R)use;
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      ArrayList<Integer> use = new ArrayList<Integer>();
      int temp = Integer.parseInt(n.f1.accept(this, argu).toString());
      use.add(temp);
      String se = n.f2.accept(this, argu).toString();
      if(n.f2.f0.which==0)
      {
        temp = Integer.parseInt(se);
        if(!use.contains(temp))
          use.add(temp);
      }
      _ret = (R)use;
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)n.f0.toString();
      return _ret;
   }

}

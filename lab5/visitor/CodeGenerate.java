//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import helpers.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */

public class CodeGenerate<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

  GlobalSymTab g;
  int label_counter = 0;

   public CodeGenerate(GlobalSymTab g)
   {
      super();
      this.g = g;
   }

   void print(String x){
      System.out.print(x);
   }

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);

      FuncSymTab f = g.get_function("MAIN");
      g.curr_func = f;
      print("MAIN [" + f.num_args + "][" + f.stack_slots + "][" + f.max_args_used + "]\n");

      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      print("END\n");
      g.curr_func = null;

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      //variable packing info
      //FILL THIS IN

      print("// Number of  vars after packing =0; Number of Spilled vars =0\n");

      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      // n.f0.accept(this, argu);

      String lab;

      if(n.f0.present())
      {
          int i;
          for(i=0;i<n.f0.size();i++)
          {
              if(((NodeOptional)((NodeSequence)n.f0.elementAt(i)).elementAt(0)).present())
              {
                  lab = ((NodeSequence)n.f0.elementAt(i)).elementAt(0).accept(this, null).toString();
                  print(lab+" ");
              }
              ((NodeSequence)n.f0.elementAt(i)).elementAt(1).accept(this, argu);
          }
      }

      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {

      g.v0_used = false;
      g.v1_used = false;

      R _ret=null;
      String func_name = n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      FuncSymTab f = g.get_function(func_name);
      g.curr_func = f;
      print(func_name + " [" + f.num_args + "][" + f.stack_slots + "][" + f.max_args_used + "]\n");

      int i;
      for(i=0;i<=f.max_saved;i++)
      {
        print("\tASTORE SPILLEDARG " + (i+g.curr_func.esp1) + " s" + i + "\n");
      }

      n.f3.accept(this, argu);

      for(i=0; i<f.num_args && i<4 ;i++)
      {
        LiveRange lr = f.get_range(i);
        if(lr.spilled)
        {
          print("\tASTORE SPILLEDARG " + lr.loc + " a" + i + "\n");
        }
        else
        {
          print("\tMOVE " + lr.reg + " a" + i + "\n");
        }
      }

      for(; i<f.num_args ;i++)
      {
        LiveRange lr = f.get_range(i);
        if(!lr.spilled)
        {
          print("\tALOAD " + lr.reg + " SPILLEDARG " + (i-4) + "\n");
        }
      }

      n.f4.accept(this, argu);

      for(i=0;i<=f.max_saved;i++)
      {
        print("\tALOAD s" + i + " SPILLEDARG " + (i+g.curr_func.esp1) + "\n");
      }

      print("END\n");
      g.curr_func = null;

      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      print("\tNOOP\n");

      g.v0_used = false;
      g.v1_used = false;
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      print("\tERROR\n");

      g.v0_used = false;
      g.v1_used = false;
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, (A)"CJUMP");

      g.v0_used = false;
      g.v1_used = false;

      String label = n.f2.accept(this, argu).toString();
      print(" "+label+"\n");
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, (A)"JUMP");
      print("\n");

      g.v0_used = false;
      g.v1_used = false;

      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      int temp = Integer.parseInt(n.f1.f1.f0.toString());
      LiveRange lr = g.curr_func.get_range(temp);

      // if(lr==null)
      //   return _ret;

      String reg;
      if(lr.spilled)
      {
        print("\tALOAD v1 SPILLEDARG " + lr.loc + "\n");
        reg = "v1";
        g.v1_used = true;
      }
      else
        reg = lr.reg;
      
      int x = Integer.parseInt(n.f2.accept(this, null).toString());

      n.f3.accept(this, (A)("HSTORE " + reg + " " + x));

      print("\n");

      g.v0_used = false;
      g.v1_used = false;

      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      int temp = Integer.parseInt(n.f1.f1.f0.toString());
      LiveRange lr = g.curr_func.get_range(temp);

      // if(lr==null)
      //   return _ret;

      String reg;
      if(lr.spilled)
        reg = "v1";
      else
        reg = lr.reg;
      
      // n.f1.accept(this, argu);
      n.f2.accept(this, (A)("HLOAD " + reg));

      int x = Integer.parseInt(n.f3.accept(this, null).toString());

      print(" "+x+"\n");

      if(lr.spilled)
      {
        print("\tASTORE SPILLEDARG " + lr.loc + " v1\n");
      }

      g.v0_used = false;
      g.v1_used = false;

      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      int temp = Integer.parseInt(n.f1.f1.f0.toString());
      LiveRange lr = g.curr_func.get_range(temp);

      // if(lr==null)
      //   return _ret;

      if(lr.spilled)
        argu = (A)"v1";
      else
        argu = (A)lr.reg;
      
      // n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      if(lr.spilled)
      {
        print("\tASTORE SPILLEDARG " + lr.loc + " v1\n");
      }

      g.v0_used = false;
      g.v1_used = false;

      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, (A)"PRINT");

      g.v0_used = false;
      g.v1_used = false;

      print("\n");
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      if(n.f0.which==0)
      {
        n.f0.accept(this, null);
        print("\tMOVE " + argu.toString() + " v0\n");
      }
      else
      if(n.f0.which==3)
      {
        String se = n.f0.accept(this, null).toString();
        print("\tMOVE " + argu.toString() + " " + se + "\n");
      }
      else
      {
        n.f0.accept(this, argu);
      }

      g.v0_used = false;
      g.v1_used = false;

      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      n.f3.accept(this, (A)"MOVE v0");
      print("\n");

      n.f4.accept(this, argu);

      g.v0_used = false;
      g.v1_used = false;

      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;

      int i;
      for(i=0;i<=g.curr_func.max_unsaved;i++)
      {
        print("\tASTORE SPILLEDARG " + (i+g.curr_func.esp2) + " t" + i + "\n");
      }
      int temp;
      LiveRange lr;
      for(i=0; i<n.f3.size() && i<4 ;i++)
      {
        n.f3.elementAt(i).accept(this, (A)("MOVE a"+i));
        g.v0_used = false;
        g.v1_used = false;
        print("\n");
      }

      g.v0_used = false;
      g.v1_used = false;

      while(i<n.f3.size())
      {
        n.f3.elementAt(i).accept(this, (A)("PASSARG "+(i-3)));
        g.v0_used = false;
        g.v1_used = false;
        print("\n");
        i++;
      }

      n.f0.accept(this, argu);

      n.f1.accept(this, (A)"CALL");

      g.v0_used = true;
      g.v1_used = false;

      print("\n");

      n.f2.accept(this, argu);
      // n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      for(i=0;i<=g.curr_func.max_unsaved;i++)
      {
        print("\tALOAD t" + i + " SPILLEDARG " + (i+g.curr_func.esp2) + "\n");
      }

      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      n.f1.accept(this, (A)("MOVE " +argu.toString()+ " HALLOCATE"));

      g.v0_used = false;
      g.v1_used = false;

      print("\n");

      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String op = n.f0.accept(this, argu).toString();
      String fin_reg = argu.toString();
      String temp, se, label;

      temp = n.f1.accept(this, null).toString();    // prints code for retrieval
      se = n.f2.accept(this, null).toString();

      if(!op.equals("LE") && !op.equals("NE"))
      {
        print("\tMOVE " + fin_reg + " " + op + " " + temp + " " + se + "\n");
      }
      else
      if(op.equals("LE"))
      {
        print("\tMOVE " + temp + " MINUS " + temp + " 1\n");
        print("\tMOVE " + fin_reg + " LT " + temp + " " + se + "\n");
        print("\tMOVE " + temp + " PLUS " + temp + " 1\n");
      }
      else
      if(op.equals("NE"))
      {
        print("\tMOVE " + fin_reg + " LT " + temp + " " + se + "\n");
        print("\tMOVE a1 " + se + "\n");
        print("\tMOVE a0 LT a1 " + temp + "\n");
        print("\tMOVE " + fin_reg + " PLUS " + fin_reg + " a0\n");
      }

      g.v0_used = false;
      g.v1_used = false;

      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)n.f0.choice.toString();
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      String se = n.f1.accept(this, null).toString();

      int temp = Integer.parseInt(se);
      LiveRange lr = g.curr_func.get_range(temp);

      if(argu==null)
      {
        if(lr.spilled)
        {
          String inter;
          if(!g.v0_used)
          {
            inter = "v0";
            g.v0_used = true;
          }
          else
          if(!g.v1_used)
          {
            inter  = "v1";
            g.v1_used = true;
          }
          else
          {
            print("\n\t\tPANIC!!!\n");
            return _ret;
          }

          print("\tALOAD " + inter + " SPILLEDARG " + lr.loc + "\n");
          _ret = (R)inter;
        }
        else
          _ret = (R)lr.reg;

        return _ret;
      }

      String cmd = argu.toString();
      if(lr.spilled)
      {
          String inter;
          if(!g.v0_used)
          {
            inter = "v0";
            g.v0_used = true;
          }
          else
          if(!g.v1_used)
          {
            inter  = "v1";
            g.v1_used = true;
          }
          else
          {
            print("\n\t\tPANIC!!!\n");
            return _ret;
          }
        print("\tALOAD "+ inter +" SPILLEDARG " + lr.loc + "\n");
        print("\t" + cmd + " " + inter); 
      }
      else
      {
        print("\t" + cmd + " " + lr.reg);
      }
      
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String se = n.f0.toString();

      if(argu!=null)
      {
        String cmd = argu.toString();
        print("\t" + cmd + " " + se);
      }
      else
        _ret = (R) se;

      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String se = n.f0.toString();

      if(g.curr_func!=null && g.curr_func.labels.containsKey(se))
          se = g.curr_func.name+"_"+se;

      if(argu==null)
      {
        _ret = (R)se;
        return _ret;
      }

      String cmd = argu.toString();
      print("\t" + cmd + " " + se);
      return _ret;
   }

}

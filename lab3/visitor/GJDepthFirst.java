//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */

class Variable
{
    int var;
    int struct_offset;
    String type;

    public Variable(int var, String type)
    {
        this.var = var;
        this.type = type;
    }
}

class SymTab 
{
    HashMap<String, Variable> variables = new HashMap<String, Variable>();
    String block_name;
    String parent;

    public boolean contains_variable(String id)
    {
        return variables.containsKey(id);
    }

    public void put_variable(String id, String type)
    {
        Variable v;
        if(this instanceof MethodSymTab)
          v = new Variable(GlobalSymTab.new_temp(), type);
        else
          v = new Variable(-1, type);

        variables.put(id, v);
    }

    public boolean variableExists(String id, GlobalSymTab g)
    {
        if(variables.containsKey(id))
        {
            return true;
        }
        else
        if(parent!=null)
        {
            if(g.contains_class(parent))
            {
                return g.get_class(parent).variableExists(id, g);
            }
        }
        return false;
    }

    public Variable getVariable(String id, GlobalSymTab g)
    {
        if(variables.containsKey(id))
        {
            return variables.get(id);
        }
        else
        if(parent!=null)
        {
            if(g.contains_class(parent))
            {
                return g.get_class(parent).getVariable(id, g);
            }  
        }
        return null;
    }

}

class MethodSymTab extends SymTab
{
    // HashMap<String, int> parameter_list = new HashMap<String, int>();
    int parameter_count;
    int vtable_offset;

    String return_type;

    public MethodSymTab(String block_name, String return_type, GlobalSymTab g)
    {
        this.block_name = block_name;
        this.return_type = return_type;
        this.parent = g.current_scope.block_name;
        this.parameter_count = 0;
        this.vtable_offset = -1;
    }

    public void put_parameter_var(String id, String type)
    {
        Variable v = new Variable(parameter_count+1, type);
        variables.put(id, v);
        parameter_count++;
    }

    public boolean contains_method(String id, GlobalSymTab g)
    {
        if(g.contains_class(parent))
        {
            return g.get_class(parent).contains_method(id, g);
        }
        return false;
    }

    public MethodSymTab get_method(String id, GlobalSymTab g)
    {
        if(g.contains_class(parent))
        {
            return g.get_class(parent).get_method(id, g);
        }
        return null;
    }

}

class ClassSymTab extends SymTab
{
    HashMap<String, MethodSymTab> methods = new HashMap<String, MethodSymTab>();

    int vtable_size;
    int struct_size;

    public ClassSymTab(String block_name)
    {
        this.block_name = block_name;
        this.vtable_size = -1;
        this.struct_size = -1;
    }

    public ClassSymTab(String block_name, String parent)
    {
        this.block_name = block_name;
        this.parent = parent;
        this.vtable_size = -1;
        this.struct_size = -1;
    }

    public void put_method(String id, String return_type, GlobalSymTab g)
    {
        MethodSymTab mst = new MethodSymTab(id, return_type, g);
        g.current_scope = mst;
        methods.put(id, mst);
    }

    public boolean contains_method(String id, GlobalSymTab g)
    {
        if(methods.containsKey(id))
        {
            return true;
        }   
        else
        if(parent!=null)
        {
            if(g.contains_class(parent))
            {
                return g.get_class(parent).contains_method(id, g);
            }  
        }
        return false;  
    }

    public MethodSymTab get_method(String id, GlobalSymTab g)
    {
        if(methods.containsKey(id))
        {
            return methods.get(id);
        }   
        else
        if(parent!=null)
        {
            if(g.contains_class(parent))
            {
                return g.get_class(parent).get_method(id, g);
            }  
        }  
        return null;
    }

    public void fillParams(GlobalSymTab g){
        if(parent!=null)
        {
            ClassSymTab parent_class = g.get_class(parent);
            if(parent_class.struct_size<0)
            {
                parent_class.fillParams(g);
            }

            vtable_size = parent_class.vtable_size;
            struct_size = parent_class.struct_size;

            //iterate through methods and if not present in ancestors, then increment vtable_size. Set vtable_offset for all methods.
            for(Map.Entry<String, MethodSymTab> entry : methods.entrySet())
            {
                MethodSymTab func = entry.getValue();

                if(parent_class.contains_method(func.block_name, g))
                {
                    func.vtable_offset = parent_class.get_method(func.block_name, g).vtable_offset;
                } 
                else
                {
                    func.vtable_offset = vtable_size;
                    vtable_size += 4;
                }                
            }

            //iterate through variables and increment struct_size for each variable

            for(Map.Entry<String, Variable> entry : variables.entrySet())
            {
                Variable v = entry.getValue();
                v.struct_offset = struct_size;
                struct_size += 4;
            }
        }
        else
        {
            vtable_size = 0;
            struct_size = 4;

            for(Map.Entry<String, MethodSymTab> entry : methods.entrySet())
            {
                MethodSymTab func = entry.getValue();

                func.vtable_offset = vtable_size;
                vtable_size += 4;                
            }

            //iterate through variables and increment struct_size for each variable

            for(Map.Entry<String, Variable> entry : variables.entrySet())
            {
                Variable v = entry.getValue();
                v.struct_offset = struct_size;
                struct_size += 4;
            }
        }
    }

    public boolean isAncestor(String class_name, GlobalSymTab g)
    {
        if(block_name == class_name)
          return true;

        if(parent!=null){
            return g.get_class(parent).isAncestor(class_name, g);
        }
        return false;
    }

}

class GlobalSymTab
{
    HashMap<String, ClassSymTab> classes = new HashMap<String, ClassSymTab>();   

    SymTab current_scope; 

    static int temp_free = 20;
    static int label_free = 0;

    public static int new_temp(){
        int x = temp_free;
        temp_free++;
        return x;
    }

    public static String new_label(){
        int x = label_free;
        label_free++;
        return "L"+x;
    }

    public boolean contains_class(String key)
    {
        return classes.containsKey(key);
    }

    public ClassSymTab get_class(String key)
    {
        return classes.get(key);
    }

    public void put_class(String class_name)
    {
        ClassSymTab st = new ClassSymTab(class_name);
        this.current_scope = st;
        classes.put(class_name, st);
    }

    public void put_class(String class_name, String extends_class)
    {
        ClassSymTab st = new ClassSymTab(class_name, extends_class);
        this.current_scope = st;
        classes.put(class_name, st);
    }

    public void fillParams()
    {
        for(Map.Entry<String, ClassSymTab> entry : classes.entrySet())
        {
            ClassSymTab cst = entry.getValue();
            if(cst.struct_size==-1)
            {
                cst.fillParams(this);
            }
        }
    }

    public ClassSymTab get_root(String id)
    {
        ClassSymTab cst = this.get_class(id);
        if(cst.parent==null)
            return cst;
        return this.get_root(cst.parent);
    }

    public String make_func_name(MethodSymTab mst)
    {
        return this.get_class(mst.parent).block_name + "_" + mst.block_name;
    }

}

public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   GlobalSymTab g = new GlobalSymTab();

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;

      n.f0.accept(this, (A)"first");
      n.f1.accept(this, (A)"first");
      n.f2.accept(this, (A)"first");
    
      g.fillParams();

      n.f0.accept(this, (A)"second");
      n.f1.accept(this, (A)"second");
      n.f2.accept(this, (A)"second");

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      if(argu.toString().equals("second"))
      {
          System.out.println("MAIN");
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);

      if(argu.toString().equals("second"))
      {
          System.out.println("\nEND");
      }

      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);
      String class_name = n.f1.accept(this, argu).toString();
      
      if(argu.toString().equals("first"))
      {
          g.put_class(class_name);   
      }
      else
      {
          g.current_scope = g.get_class(class_name);
      }

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);  
        
      g.current_scope = null;

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String class_name = n.f1.accept(this, argu).toString();
      n.f2.accept(this, argu);
      String extends_class = n.f3.accept(this, argu).toString();

      if(argu.toString().equals("first"))
      {
          g.put_class(class_name, extends_class);   
      }
      else
      {
          g.current_scope = g.get_class(class_name);
      }

      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);      

      g.current_scope = null;

      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      String type = n.f0.accept(this, argu).toString();
      String id = n.f1.accept(this, argu).toString();
      n.f2.accept(this, argu);

      if(argu.toString().equals("first"))
      {
          g.current_scope.put_variable(id, type);
      }
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);
      
      String return_type = n.f1.accept(this, argu).toString();
      String method_name = n.f2.accept(this, argu).toString();

      int num_args = 1;

      if(argu.toString().equals("first"))
      {
          ((ClassSymTab)g.current_scope).put_method(method_name, return_type, g);  // current scope changes to this method  
      }      
      else
      {
          g.current_scope = ((ClassSymTab)g.current_scope).get_method(method_name, g);
          System.out.print("\n" + g.make_func_name((MethodSymTab)g.current_scope) + " ");
          num_args += ((MethodSymTab)g.current_scope).parameter_count;
      }

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      if(argu.toString().equals("second"))
      {
          System.out.println("[ " + num_args + " ]");
          System.out.println("\n  BEGIN");
      }

      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);

      if(argu.toString().equals("second"))
      {
          System.out.println("\n  RETURN");
      }
      n.f10.accept(this, argu);

      n.f11.accept(this, argu);
      n.f12.accept(this, argu);  

      if(argu.toString().equals("second"))
      {
          System.out.println("\n  END");
      }

      g.current_scope = g.get_class(g.current_scope.parent);
      
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      String type = n.f0.accept(this, argu).toString();
      String id = n.f1.accept(this, argu).toString();
      if(argu.toString().equals("first"))
      {
          ((MethodSymTab)g.current_scope).put_parameter_var(id, type);

          // ((MethodSymTab)g.current_scope).parameter_list.put(id, ((MethodSymTab)g.current_scope).parameter_count);
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret = (R) "int[]";
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) "boolean";
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) "int";
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      R id = n.f0.accept(this, argu);
      n.f1.accept(this, argu);      

      if(argu.toString().equals("second")){        
          Variable v = g.current_scope.getVariable(id.toString(), g);
          if(v.var!=-1)
              System.out.print("\tMOVE TEMP " + v.var + " ");
          else
          {
              System.out.print("\tHSTORE TEMP 0 " + v.struct_offset + " ");
          }
      }

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      if(argu.toString().equals("second")){
          System.out.println("");
      }

      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;

      int temp1=-1, temp2=-1, temp3=-1;
      String lab = "";
      if(argu.toString().equals("second")){
          temp1 = g.new_temp();
          System.out.println("\tMOVE TEMP " + temp1 + " ");
      }

      R id = n.f0.accept(this, argu);

      if(argu.toString().equals("second")){
          Variable v = g.current_scope.getVariable(id.toString(), g);
          if(v.var!=-1)
              System.out.println("TEMP " + v.var + " ");
          else
          {
              System.out.println("\n  BEGIN");
              int temp_instance = g.new_temp();
              System.out.println("\tHLOAD TEMP " + temp_instance + " TEMP 0 " + v.struct_offset);
              System.out.println("  RETURN");
              System.out.println("TEMP " + temp_instance);
              System.out.println("  END"); 
          }
          System.out.print("\tHSTORE PLUS TEMP " + temp1 + " ");
          System.out.println(" PLUS 4");
          System.out.println("\n  BEGIN");
          temp2 = g.new_temp();
          System.out.print("\tMOVE TEMP " + temp2 + " TIMES 4 ");
      }

      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      if(argu.toString().equals("second")){
          temp3 = g.new_temp();
          System.out.println("\n\tHLOAD TEMP " + temp3 + " TEMP " + temp1 + " 0");
          lab = g.new_label();
          System.out.println("\tCJUMP MINUS 1 LE TEMP " + temp2 + " MINUS TIMES 4 TEMP " + temp3 + " 1 " + lab);
          System.out.println("\tERROR");
          System.out.println(lab + "\tNOOP");
          System.out.println("  RETURN");
          System.out.println("TEMP " + temp2);
          System.out.println("  END");
          System.out.println(" 0");
      }

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      
      n.f6.accept(this, argu);

      if(argu.toString().equals("second")){
          System.out.println("");
      }

      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      String label = "";

      if(argu.toString().equals("second")){
          System.out.print("\tCJUMP ");
      }

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      n.f2.accept(this, argu);
      if(argu.toString().equals("second")){
          label = g.new_label();
          System.out.println("\n"+label);
      }

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      if(argu.toString().equals("second")){
          System.out.println("\n" + label + "\tNOOP");
      }

      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      String label1="", label2="";

      if(argu.toString().equals("second")){
          System.out.print("\tCJUMP ");
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      
      n.f2.accept(this, argu);
      if(argu.toString().equals("second")){
          label1 = g.new_label();
          System.out.println(label1);
      }

      n.f3.accept(this, argu);
      
      n.f4.accept(this, argu); 
      if(argu.toString().equals("second")){
          label2 = g.new_label();
          System.out.println("\tJUMP " + label2);
          System.out.println(label1 + "\tNOOP");
      }

      n.f5.accept(this, argu);
      
      n.f6.accept(this, argu);
      if(argu.toString().equals("second")){
          System.out.println("\n" + label2 + "\tNOOP");
      }
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      String label1="", label2="";

      if(argu.toString().equals("second")){
          label1 = g.new_label();
          System.out.print(label1 + "\tCJUMP ") ;
      }

      n.f1.accept(this, argu);
      
      n.f2.accept(this, argu);

      if(argu.toString().equals("second")){
          label2 = g.new_label();
          System.out.println(label2);
      }

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(argu.toString().equals("second")){
          System.out.println("\tJUMP " + label1);
          System.out.println(label2 + "\tNOOP");
      }
      
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if(argu.toString().equals("second")){
          System.out.print("\tPRINT "); 
      }
      n.f2.accept(this, argu);

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      if(argu.toString().equals("second")){
          System.out.println("");
      }

      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;

      String label1="", label2="";
      int temp_result=-1;
      if(argu.toString().equals("second")) 
      {
          temp_result = g.new_temp();
          System.out.println("\n  BEGIN");
          System.out.println("\tMOVE TEMP " + temp_result + " 1");
          System.out.print("\tCJUMP ");
      }

      n.f0.accept(this, argu);

      if(argu.toString().equals("second")) 
      {
          label1 = g.new_label();
          System.out.println("\n" + label1);
          System.out.print("\tMOVE TEMP " + temp_result + " ");
      }

      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      if(argu.toString().equals("second")) 
      {
          label2 = g.new_label();
          System.out.println("\n\tJUMP " + label2);
          System.out.println(label1 + "\tMOVE TEMP " + temp_result + " 0");
          System.out.println(label2 + "\tNOOP");
          System.out.println("  RETURN");
          System.out.println("TEMP " + temp_result);
          System.out.println("  END");
      }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      String label1="", label2="";
      int temp_result=-1;
      if(argu.toString().equals("second")) 
      {
          temp_result = g.new_temp();
          System.out.println("\n  BEGIN");
          System.out.println("\tMOVE TEMP " + temp_result + " 0");
          System.out.print("\tCJUMP MINUS 1 ");
      }
      n.f0.accept(this, argu);
      if(argu.toString().equals("second")) 
      {
          label1 = g.new_label();
          System.out.println("\n"+ label1);
          System.out.print("\tMOVE TEMP " + temp_result + " ");
      }
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(argu.toString().equals("second")) 
      {
          label2 = g.new_label();
          System.out.println("\n\tJUMP " + label2);
          System.out.println(label1 + "\tMOVE TEMP " + temp_result + " 1");
          System.out.println(label2 + "\tNOOP");
          System.out.println("  RETURN");
          System.out.println("TEMP " + temp_result);
          System.out.println("  END");
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      if(argu.toString().equals("second")) 
      {
          System.out.print("LE ");
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;

      if(argu.toString().equals("second")) 
      {
          System.out.print("NE ");
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      
      if(argu.toString().equals("second")) 
      {
          System.out.print("PLUS ");
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;

      if(argu.toString().equals("second")) 
      {
          System.out.print("MINUS ");
      }

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      
      if(argu.toString().equals("second")) 
      {
          System.out.print("TIMES ");
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      
      if(argu.toString().equals("second")) 
      {
          System.out.print("DIV ");
      }

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;

      int temp1=-1, temp2=-1, temp3=-1, temp4=-1;
      String lab="";
      if(argu.toString().equals("second"))
      {
          temp1 = g.new_temp();
          System.out.println("\n  BEGIN");
          System.out.print("\tMOVE TEMP " + temp1 + " ");
      }

      n.f0.accept(this, argu);

      if(argu.toString().equals("second"))
      {
          temp2 = g.new_temp();
          System.out.println("\n\tHLOAD TEMP " + temp2 + " PLUS TEMP " + temp1);
          temp3 = g.new_temp();
          System.out.println("  PLUS 4");
          System.out.println("\n  BEGIN");
          System.out.print("\tMOVE TEMP " + temp3 + " TIMES 4 ");
      }

      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      if(argu.toString().equals("second"))
      {
          temp4 = g.new_temp();
          System.out.println("\n\tHLOAD TEMP " + temp4 + " TEMP " + temp1 + " 0");
          lab = g.new_label();
          System.out.println("\tCJUMP MINUS 1 LE TEMP " + temp3 + " MINUS TIMES 4 TEMP " + temp4 + " 1 " + lab);
          System.out.println("\tERROR");
          System.out.println(lab + "\tNOOP");
          System.out.println("  RETURN");
          System.out.println("TEMP " + temp3);
          System.out.println("  END");
          System.out.println(" 0");
          System.out.println("  RETURN");
          System.out.println("TEMP " + temp2);
          System.out.println("  END");
      }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      int temp1=-1, temp2=-1;
      if(argu.toString().equals("second")) 
      {
          temp1 = g.new_temp();
          System.out.println("\n  BEGIN");
          System.out.print("\tMOVE TEMP " + temp1 + " ");
      }

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      if(argu.toString().equals("second")) 
      {
          temp2 = g.new_temp();
          System.out.println("\n\tHLOAD TEMP " + temp2 + " TEMP " + temp1 + " 0");
          System.out.println("  RETURN");
          System.out.println("TEMP " + temp2);
          System.out.println("  END");
      }
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;

      int temp_obj_pointer=-1, temp_vtable_pointer=-1, temp_fn_pointer=-1;
      MethodSymTab func;

      if(argu.toString().equals("second")) 
      {
          System.out.println("\n\tCALL");
          System.out.println("  BEGIN");
          temp_obj_pointer = g.new_temp();
          System.out.print("\tMOVE TEMP " + temp_obj_pointer + " ");
      }

      R class_name = n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      R func_name = n.f2.accept(this, argu);

      if(argu.toString().equals("second")) 
      { 
          temp_vtable_pointer = g.new_temp();
          temp_fn_pointer = g.new_temp();

          // System.out.println("SPECIAL:"+class_name);
          if(class_name!=null && class_name.toString().equals("this"))
            func = g.get_class(g.current_scope.parent).get_method(func_name.toString(), g);
          else
            func = g.get_class(class_name.toString()).get_method(func_name.toString(), g);

          _ret = (R)func.return_type;

          System.out.println("\n\tHLOAD TEMP " + temp_vtable_pointer + " TEMP " + temp_obj_pointer + " 0");
          System.out.println("\tHLOAD TEMP " + temp_fn_pointer + " TEMP " + temp_vtable_pointer + " " + func.vtable_offset);
          System.out.println("  RETURN");
          System.out.println("TEMP " + temp_fn_pointer);
          System.out.println("  END");
      }

      n.f3.accept(this, argu);

      if(argu.toString().equals("second")) 
        System.out.print("( TEMP " + temp_obj_pointer + " ");


      n.f4.accept(this, argu);
      
      n.f5.accept(this, argu);

      if(argu.toString().equals("second")) 
        System.out.println(" )");

      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      if(argu.toString().equals("second")) 
      {
          if(n.f1.present())
          {
              int i;
              for(i=0;i<n.f1.size();i++)
              {
                  n.f1.elementAt(i).accept(this, argu);
              }
          }  
      }      
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      if(n.f0.which==3)
      {
          if(argu.toString().equals("second"))
          {
              Variable v = g.current_scope.getVariable(_ret.toString(), g);
              if(v.var!=-1)
                  System.out.print("TEMP " + v.var + " ");
              else
              {
                  System.out.println("\n  BEGIN");
                  int temp_instance = g.new_temp();
                  System.out.println("\tHLOAD TEMP " + temp_instance + " TEMP 0 " + v.struct_offset);
                  System.out.println("  RETURN");
                  System.out.println("TEMP " + temp_instance);
                  System.out.println("  END"); 
              }
              _ret = (R)g.current_scope.getVariable(_ret.toString(), g).type;
          }
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(argu.toString().equals("second"))
          System.out.print(n.f0.toString() + " ");
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(argu.toString().equals("second"))
          System.out.print("1 ");
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(argu.toString().equals("second"))
          System.out.print("0 ");
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(argu.toString().equals("second"))
      {
          if(g.current_scope instanceof MethodSymTab)
              System.out.print("TEMP 0 ");  
      }
      _ret = (R)"this";
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
        
      int temp1=-1, temp2=-1, temp3=-1, temp4=-1;
      String lab1="", lab2="";

      if(argu.toString().equals("second"))
      {
          temp1 = g.new_temp();
          temp4 = g.new_temp();
          System.out.println("\n  BEGIN");
          System.out.print("\tMOVE TEMP " + temp4 + " ");
      } 

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      if(argu.toString().equals("second"))
      { 
          System.out.println("\tMOVE TEMP " + temp1 + " TIMES PLUS 1 TEMP " + temp4 + " 4");  
          temp2 = g.new_temp();
          System.out.println("\n\tMOVE TEMP " + temp2 + " HALLOCATE TEMP " + temp1);
          temp3 = g.new_temp();
          System.out.println("\t MOVE TEMP " + temp3 + " 4");
          lab1 = g.new_label();
          lab2 = g.new_label();
          System.out.println(lab1 + "\tCJUMP LE TEMP " + temp3 + " MINUS TEMP " + temp1 + " 1 " + lab2);
          System.out.println("\tHSTORE PLUS TEMP " + temp2 + " TEMP " + temp3 + " 0 0");
          System.out.println("\tMOVE TEMP " + temp3 + " PLUS TEMP " + temp3 + " 4");
          System.out.println("\tJUMP " + lab1);
          System.out.println(lab2 + "\tHSTORE TEMP " + temp2 + " 0 TEMP " + temp4);
          System.out.println("  RETURN");
          System.out.println("TEMP "+ temp2);
          System.out.println("  END");
      }      

      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R a = n.f1.accept(this, argu);
      _ret = a;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(argu.toString().equals("second"))
      {
          String class_name = a.toString();
          ClassSymTab cst = g.get_class(class_name);
          System.out.println("\n  BEGIN");
          int temp_vtable_pointer = g.new_temp();
          int temp_struct_pointer = g.new_temp();
          System.out.println("\tMOVE TEMP " + temp_vtable_pointer + " HALLOCATE " + cst.vtable_size);
          System.out.println("\tMOVE TEMP " + temp_struct_pointer + " HALLOCATE " + cst.struct_size);

          ArrayList<String> instructions = new ArrayList<String>();

          ClassSymTab current = cst;
          MethodSymTab func;

          while(current!=null)
          {
              for(Map.Entry<String, MethodSymTab> entry : current.methods.entrySet())
              { 
                  func = entry.getValue();
                  instructions.add("\tHSTORE TEMP " + temp_vtable_pointer + " " + func.vtable_offset + " " + g.make_func_name(func));
              }   
              current = g.get_class(current.parent);              
          }

          for(int i = instructions.size()-1; i>=0 ; i--)
          {
              System.out.println(instructions.get(i));
          }

          if(cst.struct_size>4)
          {
              int loop_control = g.new_temp();

              String l0 = g.new_label();
              String l1 = g.new_label();
              System.out.println("\tMOVE TEMP " + loop_control + " 4");
              System.out.print(l0);
              System.out.println("\tCJUMP LE TEMP " + loop_control + " " + (cst.struct_size-1) + " " + l1);
              System.out.println("\tHSTORE PLUS TEMP " + temp_struct_pointer + " TEMP " + loop_control + " 0 0");
              System.out.println("\tMOVE TEMP " + loop_control + " PLUS TEMP " + loop_control + " 4");
              System.out.println("\tJUMP "+l0);          
              System.out.print(l1);
          }
          System.out.println("\tHSTORE TEMP " + temp_struct_pointer + " 0 TEMP " + temp_vtable_pointer);
          System.out.println("  RETURN");
          System.out.println("TEMP " + temp_struct_pointer);
          System.out.println("  END");
          
      }
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      if(argu.toString().equals("second"))
      {
          System.out.print("MINUS 1 ");
      }

      n.f1.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}

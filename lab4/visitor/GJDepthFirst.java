//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   public void printer(String inp){
      System.out.print(inp);
   }

    static int temp_free = 20;
    static int label_free = 0;

    public static int new_temp(){
        int x = temp_free;
        temp_free++;
        return x;
    }

    public static String new_label(){
        int x = label_free;
        label_free++;
        return "L"+x;
    }

   public R visit(NodeList n, A argu) {
      R _ret=(R)new Integer(-1);
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=(R)new Integer(-1);
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=(R)new Integer(-1);
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=(R)new Integer(-1);
      this.temp_free = (Integer)argu;
      this.printer("MAIN\n");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      this.printer("END\n");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=(R)new Integer(-1);
      // n.f0.accept(this, argu);
      if(n.f0.present())
      {
          int i;
          for(i=0;i<n.f0.size();i++)
          {
              if(((NodeOptional)((NodeSequence)n.f0.elementAt(i)).elementAt(0)).present())
              {
                  ((NodeSequence)n.f0.elementAt(i)).elementAt(0).accept(this,(A) new Integer(3));
              }
              // System.out.println(n.f0.elementAt(i).toString());
              // n.f0.elementAt(i).accept(this, argu);
              ((NodeSequence)n.f0.elementAt(i)).elementAt(1).accept(this, argu);
          }
      }
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=(R)new Integer(-1);
      this.printer("\n");
      n.f0.accept(this, (A) new Integer(1));
      n.f1.accept(this, argu);
      int literal = (Integer)n.f2.accept(this, (A) new Integer(3));
      n.f3.accept(this, argu);
      this.printer("[" + literal + "]\n");
      this.printer("BEGIN\n");
      int temp = (Integer)n.f4.accept(this, (A) new Integer(2));
      this.printer("RETURN TEMP " + temp +"\nEND\n");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=(R)new Integer(-1);
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=(R)new Integer(-1);
      n.f0.accept(this, argu);
      this.printer("\tNOOP\n");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=(R)new Integer(-1);
      n.f0.accept(this, argu);
      this.printer("\tERROR\n");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=(R)new Integer(-1);
      n.f0.accept(this, argu);
      int temp = (Integer)n.f1.accept(this,  (A) new Integer(2));
      this.printer("\tCJUMP TEMP " + temp + " ");
      n.f2.accept(this, (A) new Integer(1));
      this.printer("\n");
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=(R)new Integer(-1);
      n.f0.accept(this, argu);
      this.printer("\tJUMP ");
      n.f1.accept(this, (A) new Integer(1));
      this.printer("\n");
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=(R)new Integer(-1);
      n.f0.accept(this, argu);
      int temp1 = (Integer)n.f1.accept(this, (A) new Integer(2));
      int literal = (Integer)n.f2.accept(this, (A) new Integer(3));
      int temp2 = (Integer)n.f3.accept(this, (A) new Integer(2));
      this.printer("\tHSTORE TEMP " + temp1 + " " + literal + " TEMP " + temp2 + "\n");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=(R)new Integer(-1);
      n.f0.accept(this, argu);
      int temp1 = (Integer)n.f1.accept(this, argu);
      int temp2 = (Integer)n.f2.accept(this, (A) new Integer(2));
      int literal = (Integer)n.f3.accept(this, (A) new Integer(3));
      this.printer("\tHLOAD TEMP " + temp1 + " TEMP " + temp2 + " " + literal + "\n");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=(R)new Integer(-1);
      n.f0.accept(this, argu);
      int temp1 = (Integer)n.f1.accept(this, argu);
      int temp2 = (Integer)n.f2.accept(this, (A) new Integer(2));
      this.printer("\tMOVE TEMP " + temp1 + " TEMP " + temp2 + "\n");
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=(R)new Integer(-1);
      n.f0.accept(this, argu);
      int temp = (Integer)n.f1.accept(this, (A) new Integer(2));
      this.printer("\tPRINT TEMP " + temp + "\n");
      return _ret;
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(Exp n, A argu) {
      R _ret=(R)new Integer(-1);
      int temp1 = (Integer)n.f0.accept(this, (A) new Integer(2));
      int temp_new = this.new_temp();
      _ret = (R) new Integer(temp_new);
      this.printer("\tMOVE TEMP " + temp_new + " TEMP " + temp1 + "\n");
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=(R)new Integer(-1);
      n.f0.accept(this, argu);
      
      n.f1.accept(this, argu);
      
      n.f2.accept(this, argu);

      _ret = n.f3.accept(this, (A) new Integer(2));

      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=(R)new Integer(-1);
      int temp = this.new_temp();

      n.f0.accept(this, argu);
      int fp = (Integer)n.f1.accept(this, (A) new Integer(2));
      n.f2.accept(this, argu);
      ArrayList<Integer> params = new ArrayList<Integer>();
      int i;
      if(n.f3.present())
      {
          for(i=0;i<n.f3.size();i++)
          {
              params.add((Integer)n.f3.elementAt(i).accept(this, (A) new Integer(2)));
          }
      }
      // n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      this.printer("\tMOVE TEMP " + temp + " CALL TEMP " + fp + " ( ");
      for(i=0;i<params.size();i++)
      {
          this.printer("TEMP " + params.get(i) + " ");
      }
      this.printer(")\n");
      _ret = (R)new Integer(temp);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=(R)new Integer(-1);

      int temp = this.new_temp();

      n.f0.accept(this, argu);
      int exp = (Integer)n.f1.accept(this, (A) new Integer(2));
      this.printer("\tMOVE TEMP " + temp + " HALLOCATE TEMP " + exp + "\n");
      _ret = (R) new Integer(temp);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=(R)new Integer(-1);
      
      int temp = this.new_temp();
      int temp1 = (Integer)n.f1.accept(this, (A) new Integer(2));
      int temp2 = (Integer)n.f2.accept(this, (A) new Integer(2));

      this.printer("\tMOVE TEMP " + temp + " ");
      int x = (Integer)n.f0.accept(this, argu);
      
      // if(x>1)
      // {
          this.printer("TEMP " + temp1 + " TEMP " + temp2 + "\n");
      // }
      // else
      // if(x==0)
      // {
      //     this.printer("LT TEMP " + temp2 + " TEMP " + temp1 + "\n");
      //     int temp3 = this.new_temp();
      //     this.printer("MOVE TEMP " + temp3 + " 1");
      //     this.printer("\tMOVE TEMP " + temp + " MINUS TEMP " + temp3 + " TEMP " + temp + "\n");
      // }
      // else
      // if(x==1)
      // {
      //     this.printer("LT TEMP " + temp1 + " TEMP " + temp2 + "\n");
      //     int temp3 = this.new_temp();
      //     this.printer("\tMOVE TEMP " + temp3 + " LT TEMP " + temp2 + " TEMP " + temp1 + "\n");
      //     this.printer("\tMOVE TEMP " + temp + " PLUS TEMP " + temp + " TEMP " + temp3 + "\n");
      // }
            
      _ret = (R)new Integer(temp);
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=(R)new Integer(-1);
      n.f0.accept(this, argu);
      _ret = (R)new Integer(n.f0.which);
      // if(n.f0.which>1){
          this.printer(n.f0.choice.toString() + " ");
      // }
      
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=(R)new Integer(-1);
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, (A) new Integer(3));
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=(R)new Integer(-1);
      n.f0.accept(this, argu);
      
      if((Integer)argu==2)
      {
          int temp = this.new_temp();
          this.printer("\tMOVE TEMP " + temp + " " + n.f0.toString() + "\n");
          _ret = (R)new Integer(new Integer(temp));
      }
      else
      {
          _ret = (R)new Integer(Integer.parseInt(n.f0.toString()));  
      }
      
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=(R)new Integer(-1);
      n.f0.accept(this, argu);
      // if((int)argu==0){
      //   _ret = (R) Integer.parseInt(n.f0.toString().substring(1));
      // }
      // else
      if((Integer)argu==2){
        int temp = this.new_temp();
        this.printer("\tMOVE TEMP " + temp + " " + n.f0.toString()+"\n");
        _ret = (R) new Integer(temp);
      }
      else
      {
        this.printer(n.f0.toString() + " ");
      }
      return _ret;
   }

}

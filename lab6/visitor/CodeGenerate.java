//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class CodeGenerate<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

  public void print(String x)
  {
    System.out.print(x);
  }

  int curr_extra_args;

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( Procedure() )*
    * f13 -> VariablePackingInfo()
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      int num_args = Integer.parseInt(n.f2.accept(this, argu).toString());
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      int stack_slots = Integer.parseInt(n.f5.accept(this, argu).toString());
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      int max_args = Integer.parseInt(n.f8.accept(this, argu).toString());
      n.f9.accept(this, argu);

      print("\t.text\n");
      print("\t.globl\tmain\n\n");
      print("main:\n");

      print("\tsw $fp, -8($sp)\n");
      print("\tmove $fp, $sp\n");
      print("\tsw $ra, -4($fp)\n");

      int stack_size = 2 + stack_slots;
      if(max_args>4)
        stack_size += max_args - 4;

      stack_size *= 4;

      if(num_args>4)
        curr_extra_args = num_args - 4;
      else
        curr_extra_args = 0;

      print("\tsubu $sp, $sp, " + stack_size + "\n");

      n.f10.accept(this, argu);
      n.f11.accept(this, argu);

      print("\tlw $ra, -4($fp)\n");
      print("\tlw $fp, -8($fp)\n");
      print("\taddu $sp, $sp, " + stack_size + "\n");
      print("\tjr $ra\n\n");

      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);

      print("\n\t.text\n");
      print("\t.globl _halloc\n");
      print("_halloc:\n");
      print("\tli $v0, 9\n");
      print("\tsyscall\n");
      print("\tjr $ra\n");

      print("\n\t.text\n");
      print("\t.globl _print\n");
      print("_print:\n");
      print("\tli $v0, 1\n");
      print("\tsyscall\n");
      print("\tla $a0, newl\n");
      print("\tli $v0, 4\n");
      print("\tsyscall\n");
      print("\tjr $ra\n");

      print("\n\t.data\n");
      print("\t.align\t0\n");
      print("newl:\t.asciiz \"\\n\"\n");

      print("\n\t.data\n");
      print("\t.align\t0\n");
      print("str_er:\t.asciiz \"ERROR: abnormal termination\\n\"\n");

      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      // n.f0.accept(this, argu);

      String lab;

      if(n.f0.present())
      {
          int i;
          for(i=0;i<n.f0.size();i++)
          {
              if(((NodeOptional)((NodeSequence)n.f0.elementAt(i)).elementAt(0)).present())
              {
                  lab = ((NodeSequence)n.f0.elementAt(i)).elementAt(0).accept(this, null).toString();
                  print(lab+": ");
              }
              ((NodeSequence)n.f0.elementAt(i)).elementAt(1).accept(this, argu);
          }
      }

      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String func_name = n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      int num_args = Integer.parseInt(n.f2.accept(this, argu).toString());
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      int stack_slots = Integer.parseInt(n.f5.accept(this, argu).toString());
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      int max_args = Integer.parseInt(n.f8.accept(this, argu).toString());
      n.f9.accept(this, argu);

      print("\t.text\n");
      print("\t.globl\t"+func_name+"\n\n");
      print(func_name+":\n");

      print("\tsw $fp, -8($sp)\n");
      print("\tmove $fp, $sp\n");
      print("\tsw $ra, -4($fp)\n");

      int stack_size = 2 + stack_slots;
      if(max_args>4)
        stack_size += max_args - 4;

      stack_size *= 4;

      if(num_args>4)
        curr_extra_args = num_args - 4;
      else
        curr_extra_args = 0;

      print("\tsubu $sp, $sp, " + stack_size + "\n");

      n.f10.accept(this, argu);
      n.f11.accept(this, argu);

      print("\tlw $ra, -4($fp)\n");
      print("\tlw $fp, -8($fp)\n");
      print("\taddu $sp, $sp, " + stack_size + "\n");
      print("\tjr $ra\n\n");

      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      print("\tnop\n");

      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      print("\tli $v0, 4\n");
      print("\tla $a0, str_er\n");
      print("\tsyscall\n");
      print("\tli $v0, 10\n");
      print("\tsyscall\n");

      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = n.f1.accept(this, argu).toString();
      String label = n.f2.accept(this, argu).toString();

      print("\tbeqz $" + reg + ", " + label + "\n");

      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String label = n.f1.accept(this, argu).toString();

      print("\tb " + label + "\n");

      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String dest = n.f1.accept(this, argu).toString();
      int offset = Integer.parseInt(n.f2.accept(this, argu).toString());
      String src = n.f3.accept(this, argu).toString();

      print("\tsw $" + src + ", " + offset +"($" + dest + ")\n");

      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String dest = n.f1.accept(this, argu).toString();
      String src =n.f2.accept(this, argu).toString();
      int offset = Integer.parseInt(n.f3.accept(this, argu).toString());

      print("\tlw $" + dest + ", " + offset + "($" + src + ")\n");

      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = n.f1.accept(this, argu).toString();

      n.f2.accept(this, (A)reg);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String x = n.f1.accept(this, argu).toString();

      if(n.f1.f0.which==0)  // reg
      {
        print("\tmove $a0, $" + x + "\n");
      }
      else
      if(n.f1.f0.which==1)  // integer literal
      {
        print("\tli $a0, " + x + "\n");
      }
      else
      if(n.f1.f0.which==2)  // integer literal
      {
        print("\tla $a0, " + x + "\n");
      }

      print("\tjal _print\n");

      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = n.f1.accept(this, argu).toString();
      int loc = Integer.parseInt(n.f2.accept(this, argu).toString());

      if(loc>curr_extra_args-1)
      {        
        print("\tlw $" + reg + ", -" + ((loc - curr_extra_args + 3)*4) +"($fp)\n");
      }
      else
        print("\tlw $" + reg + ", " + (loc*4) +"($fp)\n");

      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      int loc = Integer.parseInt(n.f1.accept(this, argu).toString());
      String reg = n.f2.accept(this, argu).toString();

      if(loc>curr_extra_args-1)
        print("\tsw $" + reg + ", -" + ((loc - curr_extra_args + 3)*4) +"($fp)\n");
      else
        print("\tsw $" + reg + ", " + (loc*4) +"($fp)\n");

      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      int loc = Integer.parseInt(n.f1.accept(this, argu).toString()) - 1;
      String reg = n.f2.accept(this, argu).toString();

      print("\tsw $" + reg + ", " + (loc*4) + "($sp)\n");

      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String func = n.f1.accept(this, argu).toString();

      if(n.f1.f0.which==0) // reg
      {
        print("\tjalr $" + func + "\n");
      }
      else
      if(n.f1.f0.which==2) //label
      {
        print("\tjal " + func + "\n");
      }

      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      if(n.f0.which==0 || n.f0.which==1)
        n.f0.accept(this, argu);
      else
      {
        String x = n.f0.accept(this, argu).toString();
        String reg = argu.toString();
        if(((SimpleExp)n.f0.choice).f0.which==0)    // reg
        {
          if(!reg.equals(x))
            print("\tmove $" + reg + ", $" + x + "\n");
        }
        else
        if(((SimpleExp)n.f0.choice).f0.which==1)    // integer literal
        {
          print("\tli $" + reg + ", " + x + "\n");
        }
        else
        if(((SimpleExp)n.f0.choice).f0.which==2)    // label
        {
          print("\tla $" + reg + ", " + x + "\n");
        }  
      }
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String x = n.f1.accept(this, argu).toString();
      if(n.f1.f0.which==0)      //reg
      {
        print("\tmove $a0, $" + x + "\n");
      }
      else
      if(n.f1.f0.which==1)      //integer literal
      {
        print("\tli $a0, " + x + "\n");
      }

      print("\tjal _halloc\n");

      String reg = argu.toString();

      if(!reg.equals("v0"))
      {
        print("\tmove $" + reg + ", $v0\n");
      }

      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = n.f1.accept(this, argu).toString();
      String se = n.f2.accept(this, argu).toString();

      String final_reg = argu.toString();

      switch(n.f0.f0.which)
      {
        case 0:      // LT

        if(n.f2.f0.which==0)  // reg
        {
          print("\tslt $" + final_reg + ", $" + reg + ", $" + se + "\n");
        }
        else
        if(n.f2.f0.which==1)  // integer literal
        {
          print("\tslti $" + final_reg + ", $" + reg + ", " + se + "\n");
        }
        else                  // label
        {
          print("\n\n\tPANIC!!\n\n");
          System.exit(0);
        }

        break;

        case 1:      // PLUS

        if(n.f2.f0.which==0)  // reg
        {
          print("\tadd $" + final_reg + ", $" + reg + ", $" + se + "\n");
        }
        else
        if(n.f2.f0.which==1)  // integer literal
        {
          print("\tadd $" + final_reg + ", $" + reg + ", " + se + "\n");
        }
        else                  // label
        {
          print("\n\n\tPANIC!!\n\n");
          System.exit(0);
        }

        break;

        case 2:      // MINUS

        if(n.f2.f0.which==0)  // reg
        {
          print("\tsub $" + final_reg + ", $" + reg + ", $" + se + "\n");
        }
        else
        if(n.f2.f0.which==1)  // integer literal
        {
          print("\tsub $" + final_reg + ", $" + reg + ", " + se + "\n");
        }
        else                  // label
        {
          print("\n\n\tPANIC!!\n\n");
          System.exit(0);
        }

        break;

        case 3:      // TIMES

        if(n.f2.f0.which==0)  // reg
        {
          print("\tmul $" + final_reg + ", $" + reg + ", $" + se + "\n");
        }
        else
        if(n.f2.f0.which==1)  // integer literal
        {
          print("\tmul $" + final_reg + ", $" + reg + ", " + se + "\n");
        }
        else                  // label
        {
          print("\n\n\tPANIC!!\n\n");
          System.exit(0);
        }

        break;

        case 4:      // DIV

        if(n.f2.f0.which==0)  // reg
        {
          print("\tdiv $" + final_reg + ", $" + reg + ", $" + se + "\n");  
        }
        else
        if(n.f2.f0.which==1)  // integer literal
        {
          print("\tdiv $" + final_reg + ", $" + reg + ", " + se + "\n");
        }
        else                  // label
        {
          print("\n\n\tPANIC!!\n\n");
          System.exit(0);
        }

        break;

        case 5:      // BITOR

        if(n.f2.f0.which==0)  // reg
        {
          print("\tor $" + final_reg + ", $" + reg + ", $" + se + "\n");
        }
        else
        if(n.f2.f0.which==1)  // integer literal
        {
          print("\tori $" + final_reg + ", $" + reg + ", " + se + "\n");
        }
        else                  // label
        {
          print("\n\n\tPANIC!!\n\n");
          System.exit(0);
        }

        break;

        case 6:      // BITAND

        if(n.f2.f0.which==0)  // reg
        {
          print("\tand $" + final_reg + ", $" + reg + ", $" + se + "\n");
        }
        else
        if(n.f2.f0.which==1)  // integer literal
        {
          print("\tand $" + final_reg + ", $" + reg + ", " + se + "\n");
        }
        else                  // label
        {
          print("\n\n\tPANIC!!\n\n");
          System.exit(0);
        }

        break;

        case 7:      // LSHIFT

        if(n.f2.f0.which==0)  // reg
        {
          print("\tsllv $" + final_reg + ", $" + reg + ", $" + se + "\n");
        }
        else
        if(n.f2.f0.which==1)  // integer literal
        {
          print("\tsll $" + final_reg + ", $" + reg + ", " + se + "\n");
        }
        else                  // label
        {
          print("\n\n\tPANIC!!\n\n");
          System.exit(0);
        }

        break;

        case 8:      // RSHIFT

        if(n.f2.f0.which==0)  // reg
        {
          print("\tsrlv $" + final_reg + ", $" + reg + ", $" + se + "\n");
        }
        else
        if(n.f2.f0.which==1)  // integer literal
        {
          print("\tsrl $" + final_reg + ", $" + reg + ", " + se + "\n");
        }
        else                  // label
        {
          print("\n\n\tPANIC!!\n\n");
          System.exit(0);
        }

        break;

        case 9:      // BITXOR

        if(n.f2.f0.which==0)  // reg
        {
          print("\txor $" + final_reg + ", $" + reg + ", $" + se + "\n");
        }
        else
        if(n.f2.f0.which==1)  // integer literal
        {
          print("\txori $" + final_reg + ", $" + reg + ", " + se + "\n");
        }
        else                  // label
        {
          print("\n\n\tPANIC!!\n\n");
          System.exit(0);
        }

        break;
      }

      return _ret;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    *       | "BITOR"
    *       | "BITAND"
    *       | "LSHIFT"
    *       | "RSHIFT"
    *       | "BITXOR"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      _ret = (R)n.f0.choice.toString();
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret = (R)n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      _ret = (R)n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> "// Number of  vars after packing ="
    * f1 -> IntegerLiteral()
    * f2 -> "; Number of Spilled vars ="
    * f3 -> IntegerLiteral()
    */
   public R visit(VariablePackingInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

}
